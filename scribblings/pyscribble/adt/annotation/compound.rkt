#lang racket/base

(require racket/serialize
         )

;; Do not use this module directly.
;; Require either the typed or contracted submodule.

;; This is organized so the contracts can use the
;; predicated generated by define-predicate.

(module* typed typed/racket/base
  (require (submod "../kernel.rkt" typed))
  (provide Annotation
           annotation?
           Structural-Annotation
           structural-ann?
           )
  (require/typed/provide
   (submod "..")
   [#:struct constructor-ann ([name : full-value-name]
                              [args : (Listof Annotation)])]
   [#:struct dict-ann ([assocs : (Listof (Pairof Annotation
                                                 Annotation))])]
   [#:struct list-ann ([content : (Listof Annotation)])]
   [#:struct tuple-ann ([content : (Listof Annotation)])])
  (define-type Annotation (U Kernel-Annotation
                           constructor-ann
                           Structural-Annotation))
  (define-predicate annotation? Annotation)
  (define-type Structural-Annotation (U dict-ann
                                      list-ann
                                      tuple-ann))
  (define-predicate structural-ann? Structural-Annotation)
  #|END module* typed|#)
(module* contracted racket/base
  (require (submod "..")
           (only-in (submod ".." typed)
                    annotation?
                    structural-ann?)
           (only-in "../kernel.rkt"
                    full-value-name?)
           racket/contract)
  (provide (all-from-out (submod ".." typed))
           (contract-out
            [struct constructor-ann
              ([name full-value-name?]
               [args (listof annotation?)])]
            [struct dict-ann
              ([assocs (listof (cons/c annotation?
                                       annotation?))])]
            [struct list-ann
              ([content (listof annotation?)])]
            [struct tuple-ann
              ([content (listof annotation?)])]
            ))
  #|END module* contracted|#)

(provide (struct-out constructor-ann)
         (struct-out dict-ann)
         (struct-out list-ann)
         (struct-out tuple-ann)
         )

(serializable-struct constructor-ann (name args)
  #:transparent)

(serializable-struct dict-ann ([assocs])
  #:transparent)

(serializable-struct list-ann ([content])
  #:transparent)

(serializable-struct tuple-ann ([content])
  #:transparent)

