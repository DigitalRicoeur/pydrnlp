[["pydrnlp.segtokenize", {"text": ["docstring", "Core functionality for tokenizing segmented documents."], "functions": [{"name": "Natural", "signature": {"parameters": [{"name": "any", "annotation": false, "kind": "POSITIONAL_OR_KEYWORD", "default": false}], "return": ["class", {"module": "builtins", "name": "bool", "string": "<class 'bool'>"}]}, "ispredicate": true, "text": ["docstring", "Recognizes integers where \u0192pyflow{any >= 0}"]}, {"name": "PositiveInt", "signature": {"parameters": [{"name": "any", "annotation": false, "kind": "POSITIONAL_OR_KEYWORD", "default": false}], "return": ["class", {"module": "builtins", "name": "bool", "string": "<class 'bool'>"}]}, "ispredicate": true, "text": ["docstring", "Recognizes integers where \u0192pyflow{any > 0}"]}, {"name": "tokenizeDoc", "signature": {"parameters": [{"name": "jsDocIn", "annotation": ["named-annotation", {"module": "pydrnlp.segtokenize", "name": "InputDoc", "string": "<pydrnlp.annotations._NamedAnnotation object at 0x10eb0a470>"}], "kind": "POSITIONAL_OR_KEYWORD", "default": false}], "return": ["named-annotation", {"module": "pydrnlp.segtokenize", "name": "TokenizedDoc", "string": "<pydrnlp.annotations._NamedAnnotation object at 0x10eb0aa20>"}]}, "ispredicate": false, "text": ["docstring", "Tokenizes one document.\n\nUses tokenizeSegment to process each segment JSON value\nin the given document JSON value."]}, {"name": "tokenizeDocList", "signature": {"parameters": [{"name": "jsIn", "annotation": ["annotation-constructor", {"module": "pydrnlp.annotations", "name": "ListOf", "args": [["named-annotation", {"module": "pydrnlp.segtokenize", "name": "InputDoc", "string": "<pydrnlp.annotations._NamedAnnotation object at 0x10eb0a470>"}]]}], "kind": "POSITIONAL_OR_KEYWORD", "default": false}], "return": ["annotation-constructor", {"module": "pydrnlp.annotations", "name": "ListOf", "args": [["named-annotation", {"module": "pydrnlp.segtokenize", "name": "TokenizedDoc", "string": "<pydrnlp.annotations._NamedAnnotation object at 0x10eb0aa20>"}]]}]}, "ispredicate": false, "text": ["docstring", "Simply maps tokenizeDoc over the list of JSON values.\n    "]}, {"name": "tokenizeSegment", "signature": {"parameters": [{"name": "sgmnt", "annotation": ["named-annotation", {"module": "pydrnlp.segtokenize", "name": "InputSegment", "string": "<pydrnlp.annotations._NamedAnnotation object at 0x10eb08e80>"}], "kind": "POSITIONAL_OR_KEYWORD", "default": false}], "return": ["named-annotation", {"module": "pydrnlp.segtokenize", "name": "TokenizedSegment", "string": "<pydrnlp.annotations._NamedAnnotation object at 0x10eb08588>"}]}, "ispredicate": false, "text": ["docstring", "Processes the JSON value representing a segment.\n\nUses the spacy Language object to process the body,\ncalls tokensFilterUniqueLemma to obtain LemmaWithCount dictionaries,\nand wraps the results into a JSON value."]}, {"name": "tokenizerRevision", "signature": {"parameters": [], "return": ["named-annotation", {"module": "pydrnlp.drtoken", "name": "RevisionJsexpr", "string": "<pydrnlp.annotations._NamedAnnotation object at 0x10c2b4978>"}]}, "ispredicate": false, "text": ["docstring", "Returns a non-False JSON expression identifying the current revision\n\nThe intended purpose is for clients to\nbe able to cache responses: \nAs long as tokenizerRevision() returns the same number, \ncalling this API on the same input should return equivalent output.\nThis enables clients to cache responses.\nThe returned value incorporates the result of\npydrnlp.drtoken.tokenFilterRevision().\n\nWhen the result of tokenizerRevision() changes, any cache is stale."]}, {"name": "tokensFilterUniqueLemma", "signature": {"parameters": [{"name": "seq", "annotation": ["annotation-constructor", {"module": "pydrnlp.annotations", "name": "IteratorOf", "args": [["class", {"module": "spacy.tokens.token", "name": "Token", "string": "<class 'spacy.tokens.token.Token'>"}]]}], "kind": "POSITIONAL_OR_KEYWORD", "default": false}], "return": ["annotation-constructor", {"module": "pydrnlp.annotations", "name": "IteratorOf", "args": [["named-annotation", {"module": "pydrnlp.segtokenize", "name": "LemmaWithCount", "string": "<pydrnlp.annotations._NamedAnnotation object at 0x10eb79358>"}]]}]}, "ispredicate": false, "text": ["docstring", "Counts the number of occurences of each lemma.\n\nOnly tokens in the argument sequence which satisfy\ntokenShouldUse are considered.\n\nThe resulting iterator has one LemmaWithCount dictionary \nfor each unique significant lemma.\n\nThe purpose of the \"text\" field is to provide an exemplar\nof an actual use of the word, as the lemma is always\nnormalized, but some words (e.g. \"DuFay\") shouldn't be.\n(Also, some lemmas are strange, like \"whatev\".)\n\nMore thought should be given to the right way to chose\nan exemplar, which is an issue both here and in client code."]}], "named-annotations": [{"name": "InputDoc", "module": "pydrnlp.segtokenize", "value": {"name": "InputDoc", "docstring": false, "value": ["dict", [[["string", "key"], ["class", {"module": "builtins", "name": "str", "string": "<class 'str'>"}]], [["string", "segments"], ["annotation-constructor", {"module": "pydrnlp.annotations", "name": "ListOf", "args": [["named-annotation", {"module": "pydrnlp.segtokenize", "name": "InputSegment", "string": "<pydrnlp.annotations._NamedAnnotation object at 0x10eb08e80>"}]]}]]]]}}, {"name": "InputSegment", "module": "pydrnlp.segtokenize", "value": {"name": "InputSegment", "docstring": false, "value": ["dict", [[["string", "counter"], ["function", {"module": "pydrnlp.segtokenize", "name": "Natural"}]], [["string", "body"], ["class", {"module": "builtins", "name": "str", "string": "<class 'str'>"}]]]]}}, {"name": "LemmaWithCount", "module": "pydrnlp.segtokenize", "value": {"name": "LemmaWithCount", "docstring": false, "value": ["dict", [[["string", "lemma"], ["class", {"module": "builtins", "name": "str", "string": "<class 'str'>"}]], [["string", "text"], ["class", {"module": "builtins", "name": "str", "string": "<class 'str'>"}]], [["string", "count"], ["function", {"module": "pydrnlp.segtokenize", "name": "PositiveInt"}]]]]}}, {"name": "TokenizedDoc", "module": "pydrnlp.segtokenize", "value": {"name": "TokenizedDoc", "docstring": false, "value": ["dict", [[["string", "key"], ["class", {"module": "builtins", "name": "str", "string": "<class 'str'>"}]], [["string", "segments"], ["annotation-constructor", {"module": "pydrnlp.annotations", "name": "ListOf", "args": [["named-annotation", {"module": "pydrnlp.segtokenize", "name": "TokenizedSegment", "string": "<pydrnlp.annotations._NamedAnnotation object at 0x10eb08588>"}]]}]]]]}}, {"name": "TokenizedSegment", "module": "pydrnlp.segtokenize", "value": {"name": "TokenizedSegment", "docstring": false, "value": ["dict", [[["string", "counter"], ["function", {"module": "pydrnlp.segtokenize", "name": "Natural"}]], [["string", "tokenized"], ["annotation-constructor", {"module": "pydrnlp.annotations", "name": "ListOf", "args": [["named-annotation", {"module": "pydrnlp.segtokenize", "name": "LemmaWithCount", "string": "<pydrnlp.annotations._NamedAnnotation object at 0x10eb79358>"}]]}]]]]}}], "classes": []}]]
