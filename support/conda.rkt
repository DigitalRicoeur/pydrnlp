#lang racket/base

(require racket/runtime-path
         racket/system
         setup/path-to-relative
         "../py/environment.rkt"
         ricoeur/stdlib/json
         adjutor
         (for-syntax racket/base))

(provide py-dir
         python3
         conda-environment-variables
         conda-available?
         installer)

;; TODO: use loggers, not eprintf

(TODO/void PATH in newer conda)
;; The py-dir and python3 still work,
;; but conda after 4.4 doesn't put conda in your PATH
;; unless you activate the base environment.
;; We may just require everyone to do that.
;; The conda 4.6 release may provide better options,
;; like `conda run`.

;; TODO: think about how to prevent the user running
;; ricoeur-portal (as opposed to running `raco setup`)
;; from needing write access to the package source.

(define init-env
  (current-environment-variables))

(define-runtime-path environment.yml
  '(lib "pydrnlp/py/environment.yml"))

(define py-dir
  (let-values ([{base n d}
                (split-path environment.yml)])
    base))

(define condaenv-dir
  (build-path py-dir "condaenv/"))

(define condaenv-bin
  (build-path condaenv-dir "bin/"))

(define conda
  ;; could shell out and check CONDA_EXE environment variable
  (find-executable-path* "conda"))

(define conda-available?
  (any->boolean conda))

(define conda-python-exe
  (and conda
       (let ()
         (define-values {dir _base _name}
           (split-path conda))
         (define pth
           (build-path dir "python"))
         (and (or (file-exists? pth)
                  (link-exists? pth))
              pth))))

(define* conda-env
  (define condaenv-dir-bytes
    (bytes->immutable-bytes
     (path->bytes condaenv-dir)))
  (environment-variables-set*
   init-env
   #"CONDA_DEFAULT_ENV" condaenv-dir-bytes
   #"CONDA_PREFIX" condaenv-dir-bytes
   #"CONDA_EXE" (and conda (path->bytes conda))
   #"CONDA_PYTHON_EXE" (if conda-python-exe
                           (path->bytes conda-python-exe)
                           (environment-variables-ref init-env
                                                      #"CONDA_PYTHON_EXE"))
   #"CONDA_SHLVL" #"1"
   #"PATH" (let ([condaenv-bin-bs (path->bytes condaenv-bin)]
                 [sep (case (system-type 'os)
                        [(windows) #";"]
                        [else #":"])]
                 [old-path (environment-variables-ref init-env #"PATH")])
             ;; is this correct on Windows ???
             (if old-path
                 (bytes-append condaenv-bin-bs sep old-path)
                 condaenv-bin-bs))
   ;; see http://click.pocoo.org/5/python3/#python-3-surrogate-handling
   ;; Apparently Mac OS doesn't set locale for GUI programs.
   #"LANG" (or (environment-variables-ref init-env #"LANG")
               #"en_US.UTF-8")))

(define python3
  (parameterize ([current-environment-variables conda-env])
    (find-executable-path "python3")))

(define (conda-environment-variables)
  (environment-variables-copy conda-env))

(define (update-conda-environment)
  (define yml-up-to-date?
    (check/update-environment.yml!))
  (define condaenv-dir-exists?
    (directory-exists? condaenv-dir))
  (unless (and condaenv-dir-exists? yml-up-to-date?)
    (unless (parameterize ([current-directory py-dir]
                           [current-input-port (open-input-string "")])
              (cond
                [condaenv-dir-exists?
                 (print-notification "Updating")
                 (system* conda #"env" #"update"
                          #"--file" environment.yml
                          #"--prefix" condaenv-dir)]
                [else
                 (print-notification)
                 (system* conda #"env" #"create"
                          #"--file" environment.yml
                          #"--prefix" condaenv-dir)]))
      (delete-file environment.yml)
      (eprintf "pydrnlp: conda exited abnormally;\n ~a\n"
               "you may need to run \"raco setup\" again"))))

(define (check/update-environment.yml!)
  ;; Returns #true if environment.yml was already up to date.
  ;; Otherwise, writes to filesystem and returns #false.
  (cond
    [(and (file-exists? environment.yml)
          (equal? environment-jsexpr
                  (call-with-input-file* environment.yml
                    (λ (in)
                      (read-line in 'any)
                      (read-json in)))))]
    [else
     (call-with-output-file* environment.yml
       #:exists 'truncate/replace
       (λ (out)
         (write-string "# generated by raco setup from environment.rkt\n"
                       out)
         (write-json environment-jsexpr out)
         (newline out)))
     #f]))

(define (print-notification [verb "Creating"])
  (define cache
    (make-hash))
  (printf "~a conda environment\n  at: ~a\n  based on: ~a\n"
          verb
          (path->relative-string/library condaenv-dir #:cache cache)
          (path->relative-string/library environment.yml #:cache cache)))

(define (check-conda)
  (printf "Checking conda configuration ...\n")
  (cond
    [(not conda)
     (eprintf "WARNING: pydrnlp: no conda executable found;\n")
     (eprintf "  you may need to run `raco setup` again\n")]
    [else
     (unless conda-python-exe
       (define-values {dir _base _name}
         (split-path conda))
       (eprintf "~a;\n ~a\n  conda \"/bin/\": ~e\n"
                "WARNING: pydrnlp: no \"python\" executable in conda \"/bin/\""
                "check your \"CONDA_PYTHON_EXE\" environment variable"
                dir))
     (update-conda-environment)]))

(define (installer a b c d)
  (check-conda))



